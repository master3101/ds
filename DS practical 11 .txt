**************** DS practical 11 ****************************
tree algorithum - II

Q1. WAP to construct a binary search tree.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if root.value < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root

def build_tree(keys):
    root = None
    for key in keys:
        root = insert(root, key)
    return root

def print_tree_inorder(node, level=0, prefix="Root:"):
    if node is not None:
        print("  " * level + prefix, node.value)
        if node.left is not None or node.right is not None:
            print_tree_inorder(node.left, level + 1, "L---")
            print_tree_inorder(node.right, level + 1, "R---")

# Example usage
keys = [5, 3, 8, 2, 4, 7, 9]
root = build_tree(keys)
print_tree_inorder(root)

output:
Root: 5
  L--- 3
    L--- 2
    R--- 4
  R--- 8
    L--- 7
    R--- 9

Q2. WAP to implement binary search tree to search the node in BST.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if root.value < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root

def build_tree(keys):
    root = None
    for key in keys:
        root = insert(root, key)
    return root

def search_node(node, key):
    if node is None or node.value == key:
        return node
    if node.value < key:
        return search_node(node.right, key)
    return search_node(node.left, key)

# Example usage
keys = [5, 3, 8, 2, 4, 7, 9]
root = build_tree(keys)

search_key = 10
result_node = search_node(root, search_key)
if result_node:
    print(f"Node with value {search_key} found in the tree.")
else:
    print(f"Node with value {search_key} not found in the tree.")

output:
Node with value 10 not found in the tree.


Q3. WAP to demonstrate insert and delete method to add or delete the node.

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.value = key

def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if root.value < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root

def build_tree(keys):
    root = None
    for key in keys:
        root = insert(root, key)
    return root

def find_min_node(node):
    while node.left is not None:
        node = node.left
    return node

def delete_node(root, key):
    if root is None:
        return root
    
    if key < root.value:
        root.left = delete_node(root.left, key)
    elif key > root.value:
        root.right = delete_node(root.right, key)
    else:
        if root.left is None:
            return root.right
        elif root.right is None:
            return root.left
        temp = find_min_node(root.right)
        root.value = temp.value
        root.right = delete_node(root.right, temp.value)
    
    return root

def print_tree_inorder(node, level=0, prefix="Root:"):
    if node is not None:
        print("  " * level + prefix, node.value)
        if node.left is not None or node.right is not None:
            print_tree_inorder(node.left, level + 1, "L---")
            print_tree_inorder(node.right, level + 1, "R---")

# Example usage
keys = [5, 3, 8, 2, 4, 7, 9]
root = build_tree(keys)

delete_key = 3
print("Tree before deletion:")
print_tree_inorder(root)
print("")

root = delete_node(root, delete_key)

print("Tree after deletion:")
print_tree_inorder(root)

output:
Tree before deletion:
Root: 5
  L--- 3
    L--- 2
    R--- 4
  R--- 8
    L--- 7
    R--- 9

Tree after deletion:
Root: 5
  L--- 4
    L--- 2
  R--- 8
    L--- 7
    R--- 9