********************************** DS  practical 4********************************************

Q1. what is singly link list, doubly linked list, circular linked list

A singly linked list is a data structure consisting of a sequence of nodes, where each node contains data and a reference (or link) to the next node in the list. It forms a unidirectional chain-like structure, with the last node pointing to None (or null) to indicate the end of the list. Singly linked lists allow traversal in one direction, typically from the head (first node) to the tail (last node). They are efficient for insertion and deletion at the beginning or middle of the list but have limited capabilities for backward traversal.

A doubly linked list, on the other hand, is a data structure where each node has two references (or links): one pointing to the previous node and another pointing to the next node in the sequence. This bidirectional link allows traversal in both forward and backward directions. Doubly linked lists provide more flexibility than singly linked lists, but they require more memory to store the extra link in each node. They are suitable for scenarios where efficient bidirectional traversal or frequent insertion and deletion operations at various positions are required.

A circular linked list is a variation of a linked list where the last node of the list points back to the first node, forming a circular structure. In other words, the next pointer of the last node loops back to the head of the list. This circular linkage enables seamless traversal from the last node to the first node, and vice versa. Circular linked lists are used in scenarios where cyclic behavior is desired or when operations need to be performed on a looped set of elements. They can be implemented as both singly linked lists and doubly linked lists.



*******************code***********************************

Q. Write a program to perform different insertion operations on singly linked list.
A) Inserting a node at beginning, end & at any position of linked list 
class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LinkedList:
    def __init__(self):
        self.head = None

    def print_LL(self):
        if self.head is None:
            print("Linked list is empty!!")
        else:
            n= self.head
            while n is not None:
                print(n.data,"--->",end=" ")
                n=n.ref

    def add_begin(self,data):
        new_node= Node(data)
        new_node.ref=self.head
        self.head = new_node


    def add_end(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head = new_node
        else:
            n=self.head 
            while n.ref is not None:
                n=n.ref
            n.ref = new_node

    def add_after(self,data,x):
        n=self.head
        while n is not None:
            if x==n.data:
                break
            n=n.ref
        if n is None:
            print("Node is not present in LL")
        else:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node

    def add_before(self,data,x):
        if self.head is None:
            print("Linked List is empty")
        if self.head.data==x:
            new_node = Node(data)
            new_node.ref = self.head
            self.head = new_node
        n = self.head
        while n.ref is not None:
            if n.ref.data==x:
                break
            n=n.ref
        if n.ref is None:
            print("Node is not found!")
        else:
            new_node = Node(data)
            new_node.ref = n.ref
            n.ref = new_node
        
LL1 = LinkedList()
LL1.add_begin(20)
LL1.add_begin(40)
LL1.add_end(270)
LL1.add_begin(68)
LL1.add_end(34)
LL1.add_after(100,40)
LL1.add_before(630,20)
LL1.print_LL()

output
68 ---> 40 ---> 100 ---> 630 ---> 20 ---> 270 ---> 34 ---> 




B) Deletion of Node at beginning of linked list
class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LinkedList:
    def __init__(self):
        self.head = None

    def print_LL(self):
        if self.head is None:
            print("Linked list is empty!!")
        else:
            n= self.head
            while n is not None:
                print(n.data,"--->",end=" ")
                n=n.ref

    def add_begin(self,data):
        new_node= Node(data)
        new_node.ref=self.head
        self.head = new_node
        
    def delete_begin(self):
        if self.head is None:
            print("LL is empty so we cant delete node!")
        else:
            self.head = self.head.ref

LL1 = LinkedList()
LL1.add_begin(23)
LL1.add_begin(96)
LL1.add_begin(193)
LL1.delete_begin()
LL1.print_LL()


output
96 ---> 23 ---> 







C) Deletion of node at end of linked list
class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LinkedList:
    def __init__(self):
        self.head = None

    def print_LL(self):
        if self.head is None:
            print("Linked list is empty!!")
        else:
            n= self.head
            while n is not None:
                print(n.data,"--->",end=" ")
                n=n.ref

    def add_begin(self,data):
        new_node= Node(data)
        new_node.ref=self.head
        self.head = new_node

    def delete_end(self):
        if self.head is None:
            print("LL is empty so we cant delete nodes")
        else:
            n=self.head
            while n.ref.ref is not None:
                n = n.ref
            n=ref = None

LL1 = LinkedList()
LL1.add_begin(20)
LL1.add_begin(38)
LL1.add_begin(92)
LL1.add_begin(182)
LL1.add_begin(10)
LL1.delete_end()
LL1.print_LL()

output
10 ---> 182 ---> 92 ---> 38 ---> 20 ---> 




Q 2. Write a program to create a doubly linked list and perform various operations on it in python.
class Node:
   def __init__(self, data):
      self.data = data
      self.next = None
      self.prev = None
# Create the doubly linked list class
class doubly_linked_list:

   def __init__(self):
      self.head = None

# Define the push method to add elements at the begining
   def push(self, NewVal):
      NewNode = Node(NewVal)
      NewNode.next = self.head
      if self.head is not None:
         self.head.prev = NewNode
      self.head = NewNode

# Define the append method to add elements at the end
   def append(self, NewVal):

      NewNode = Node(NewVal)
      NewNode.next = None
      if self.head is None:
         NewNode.prev = None
         self.head = NewNode
         return
      last = self.head
      while (last.next is not None):
         last = last.next
      last.next = NewNode
      NewNode.prev = last
      return

# Define the method to print
   def listprint(self, node):
      while (node is not None):
         print(node.data),
         last = node
         node = node.next

dllist = doubly_linked_list()
dllist.push(12)
dllist.append(9)
dllist.push(8)
dllist.push(62)
dllist.append(45)
dllist.listprint(dllist.head)

output
62
8
12
9
45







Q 3. Write a program to create a circular linked list and perform various operations on it in python.

#Represents the node of list.    
class Node:    
  def __init__(self,data):    
    self.data = data;    
    self.next = None;    
     
class CreateList:    
  #Declaring head and tail pointer as null.    
  def __init__(self):    
    self.head = Node(None);    
    self.tail = Node(None);    
    self.head.next = self.tail;    
    self.tail.next = self.head;    
        
  #This function will add the new node at the end of the list.    
  def add(self,data):    
    newNode = Node(data);    
    #Checks if the list is empty.    
    if self.head.data is None:    
      #If list is empty, both head and tail would point to new node.    
      self.head = newNode;    
      self.tail = newNode;    
      newNode.next = self.head;    
    else:    
      #tail will point to new node.    
      self.tail.next = newNode;    
      #New node will become new tail.    
      self.tail = newNode;    
      #Since, it is circular linked list tail will point to head.    
      self.tail.next = self.head;    
     
  #Displays all the nodes in the list    
  def display(self):    
    current = self.head;    
    if self.head is None:    
      print("List is empty");    
      return;    
    else:    
        print("Nodes of the circular linked list: ");    
        #Prints each node by incrementing pointer.    
        print(current.data),    
        while(current.next != self.head):    
            current = current.next;    
            print(current.data),    
     
     
class CircularLinkedList:    
  cl = CreateList();    
  #Adds data to the list    
  cl.add(1);    
  cl.add(2);    
  cl.add(3);    
  cl.add(4);
  
  #Displays all the nodes present in the list    
  cl.display();


output
Nodes of the circular linked list: 
1
2
3
4



